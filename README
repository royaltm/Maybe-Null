Usage:

from maybe import Maybe

Maybe(someobj).someproperty.somemethod()

returns NullType() instead of raising AttributeError if someobj is None

opts = {'person': 'Very important person'}

len(Maybe(opts).get('person'))

21

len(Maybe(Maybe(opts).get('robot')))

0

opts = None

len(Maybe(opts).get('robot'))

0


Testing against None.

1. by equality and identity:
from maybe import Value

someobj = None

Value(Maybe(someobj)) is None
True

Maybe(someobj) == None
True


2. by instance check

from maybe import NullType
someobj = None

isinstance(Maybe(someobj), NullType)
True

isinstance(someobj, NullType)
True



Inspired by:
- Avdi Grimm: http://avdi.org/devblog/2011/05/30/null-objects-and-falsiness/
- herenowcoder's not-none: https://github.com/herenowcoder/not_none
and
- raganwald's andand https://github.com/raganwald/andand
